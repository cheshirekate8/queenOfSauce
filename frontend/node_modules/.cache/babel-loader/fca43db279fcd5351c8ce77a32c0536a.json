{"ast":null,"code":"import { csrfFetch } from \"./csrf.js\";\nconst GET_RECIPES = '/recipes';\n\nconst getRec = list => ({\n  type: GET_RECIPES,\n  list\n});\n\nexport const getRecipes = () => async dispatch => {\n  const response = await csrfFetch('/api/recipes');\n\n  if (response.ok) {\n    const recipes = await response.json();\n    dispatch(getRec(recipes));\n  }\n};\nconst initialState = {\n  recipes: null\n};\n\nfunction reducer(state = initialState, action) {\n  let newState;\n\n  switch (action.type) {\n    case GET_RECIPES:\n      // const allRecs = {};\n      // action.list.forEach(recipe => {\n      //     allRecs[recipe.id] = recipe\n      // })\n      newState = { ...state,\n        recipes: action.list\n      };\n      return newState;\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/cheshirekate8/appAcademyCode/projects/stardewRecipes/solution/frontend/src/store/cookbook.js"],"names":["csrfFetch","GET_RECIPES","getRec","list","type","getRecipes","dispatch","response","ok","recipes","json","initialState","reducer","state","action","newState"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AAEA,MAAMC,WAAW,GAAG,UAApB;;AAEA,MAAMC,MAAM,GAAIC,IAAD,KAAW;AACtBC,EAAAA,IAAI,EAAEH,WADgB;AAEtBE,EAAAA;AAFsB,CAAX,CAAf;;AAKA,OAAO,MAAME,UAAU,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,QAAMC,QAAQ,GAAG,MAAMP,SAAS,CAAC,cAAD,CAAhC;;AACA,MAAIO,QAAQ,CAACC,EAAb,EAAiB;AACb,UAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACAJ,IAAAA,QAAQ,CAACJ,MAAM,CAACO,OAAD,CAAP,CAAR;AACH;AACJ,CANM;AAQP,MAAME,YAAY,GAAG;AAAEF,EAAAA,OAAO,EAAE;AAAX,CAArB;;AAEA,SAASG,OAAT,CAAiBC,KAAK,GAAGF,YAAzB,EAAuCG,MAAvC,EAA+C;AAC3C,MAAIC,QAAJ;;AACA,UAAQD,MAAM,CAACV,IAAf;AACI,SAAKH,WAAL;AACI;AACA;AACA;AACA;AACAc,MAAAA,QAAQ,GAAG,EACP,GAAGF,KADI;AAEPJ,QAAAA,OAAO,EAAEK,MAAM,CAACX;AAFT,OAAX;AAIA,aAAOY,QAAP;;AACJ;AACI,aAAOF,KAAP;AAZR;AAcH;;AAED,eAAeD,OAAf","sourcesContent":["import { csrfFetch } from \"./csrf.js\";\n\nconst GET_RECIPES = '/recipes'\n\nconst getRec = (list) => ({\n    type: GET_RECIPES,\n    list\n})\n\nexport const getRecipes = () => async dispatch => {\n    const response = await csrfFetch('/api/recipes')\n    if (response.ok) {\n        const recipes = await response.json();\n        dispatch(getRec(recipes));\n    }\n}\n\nconst initialState = { recipes: null };\n\nfunction reducer(state = initialState, action) {\n    let newState;\n    switch (action.type) {\n        case GET_RECIPES:\n            // const allRecs = {};\n            // action.list.forEach(recipe => {\n            //     allRecs[recipe.id] = recipe\n            // })\n            newState = {\n                ...state,\n                recipes: action.list\n            }\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}