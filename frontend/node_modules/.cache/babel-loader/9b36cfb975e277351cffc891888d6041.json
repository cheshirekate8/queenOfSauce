{"ast":null,"code":"import { csrfFetch } from \"./csrf.js\";\nconst GET_RECIPES = '/recipes';\n\nconst getRec = payload => ({\n  type: GET_RECIPES,\n  payload\n});\n\nexport const getRecipes = () => async dispatch => {\n  const response = await csrfFetch('/api/recipes');\n\n  if (response.ok) {\n    const recipes = await response.json();\n    dispatch(getRec(recipes));\n  }\n};\nconst initialState = {\n  recipes: []\n};\n\nfunction reducer(state = initialState, action) {\n  let newState;\n\n  switch (action.type) {\n    case GET_RECIPES:\n      newState = { ...state,\n        recipes: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/cheshirekate8/appAcademyCode/projects/stardewRecipes/solution/frontend/src/store/cookbook.js"],"names":["csrfFetch","GET_RECIPES","getRec","payload","type","getRecipes","dispatch","response","ok","recipes","json","initialState","reducer","state","action","newState"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AAEA,MAAMC,WAAW,GAAG,UAApB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,KAAK;AACvBC,EAAAA,IAAI,EAAEH,WADiB;AAEvBE,EAAAA;AAFuB,CAAL,CAAtB;;AAKA,OAAO,MAAME,UAAU,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,QAAMC,QAAQ,GAAG,MAAMP,SAAS,CAAC,cAAD,CAAhC;;AACA,MAAIO,QAAQ,CAACC,EAAb,EAAiB;AACb,UAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACAJ,IAAAA,QAAQ,CAACJ,MAAM,CAACO,OAAD,CAAP,CAAR;AACH;AACJ,CANM;AAQP,MAAME,YAAY,GAAG;AAAEF,EAAAA,OAAO,EAAE;AAAX,CAArB;;AAEA,SAASG,OAAT,CAAiBC,KAAK,GAAGF,YAAzB,EAAuCG,MAAvC,EAA+C;AAC3C,MAAIC,QAAJ;;AACA,UAAQD,MAAM,CAACV,IAAf;AACI,SAAKH,WAAL;AACIc,MAAAA,QAAQ,GAAG,EACP,GAAGF,KADI;AAEPJ,QAAAA,OAAO,EAAEK,MAAM,CAACX;AAFT,OAAX;;AAIJ;AACI,aAAOU,KAAP;AAPR;AASH;;AAED,eAAeD,OAAf","sourcesContent":["import { csrfFetch } from \"./csrf.js\";\n\nconst GET_RECIPES = '/recipes'\n\nconst getRec = payload => ({\n    type: GET_RECIPES,\n    payload\n})\n\nexport const getRecipes = () => async dispatch => {\n    const response = await csrfFetch('/api/recipes')\n    if (response.ok) {\n        const recipes = await response.json();\n        dispatch(getRec(recipes));\n    }\n}\n\nconst initialState = { recipes: [] };\n\nfunction reducer(state = initialState, action) {\n    let newState;\n    switch (action.type) {\n        case GET_RECIPES:\n            newState = {\n                ...state,\n                recipes: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}