{"ast":null,"code":"import { csrfFetch } from \"./csrf.js\";\nconst GET_INGREDIENTS = '/ingredients';\nconst GET_MY_INGREDIENTS = '/myIngredients';\nconst NEW_INGREDIENT = '/newIngredient';\n\nconst getIng = list => ({\n  type: GET_INGREDIENTS,\n  list\n});\n\nconst getMyIng = list => ({\n  type: GET_MY_INGREDIENTS,\n  list\n});\n\nconst newIng = payload => ({\n  type: NEW_INGREDIENT,\n  payload\n});\n\nexport const getIngredients = () => async dispatch => {\n  const response = await csrfFetch('/api/ingredients');\n\n  if (response.ok) {\n    const ingredients = await response.json();\n    dispatch(getIng(ingredients));\n  }\n};\nexport const newIngredient = (name, imgUrl, desc, userId) => async dispatch => {\n  const response = await csrfFetch(\"/api/ingredients\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      name,\n      imgUrl,\n      desc,\n      userId\n    })\n  });\n\n  if (response.ok) {\n    const newIngredient = await response.json();\n    dispatch(newIng(newIngredient));\n    dispatch(getIngredients());\n  }\n};\nconst initialState = {\n  ingredients: null\n};\n\nfunction reducer(state = initialState, action) {\n  let newState;\n\n  switch (action.type) {\n    case GET_INGREDIENTS:\n      // const allIngs = {};\n      // action.list.forEach(ingredient => {\n      //     allIngs[ingredient.id] = ingredient\n      // })\n      newState = { ...state,\n        ingredients: action.list\n      };\n      return newState;\n\n    case NEW_INGREDIENT:\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/cheshirekate8/appAcademyCode/projects/stardewRecipes/solution/frontend/src/store/pantry.js"],"names":["csrfFetch","GET_INGREDIENTS","GET_MY_INGREDIENTS","NEW_INGREDIENT","getIng","list","type","getMyIng","newIng","payload","getIngredients","dispatch","response","ok","ingredients","json","newIngredient","name","imgUrl","desc","userId","method","body","JSON","stringify","initialState","reducer","state","action","newState"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AAEA,MAAMC,eAAe,GAAG,cAAxB;AACA,MAAMC,kBAAkB,GAAG,gBAA3B;AACA,MAAMC,cAAc,GAAG,gBAAvB;;AAEA,MAAMC,MAAM,GAAIC,IAAD,KAAW;AACtBC,EAAAA,IAAI,EAAEL,eADgB;AAEtBI,EAAAA;AAFsB,CAAX,CAAf;;AAKA,MAAME,QAAQ,GAAIF,IAAD,KAAW;AACxBC,EAAAA,IAAI,EAAEJ,kBADkB;AAExBG,EAAAA;AAFwB,CAAX,CAAjB;;AAKA,MAAMG,MAAM,GAAIC,OAAD,KAAc;AACzBH,EAAAA,IAAI,EAAEH,cADmB;AAEzBM,EAAAA;AAFyB,CAAd,CAAf;;AAMA,OAAO,MAAMC,cAAc,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAClD,QAAMC,QAAQ,GAAG,MAAMZ,SAAS,CAAC,kBAAD,CAAhC;;AACA,MAAIY,QAAQ,CAACC,EAAb,EAAiB;AACb,UAAMC,WAAW,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA1B;AACAJ,IAAAA,QAAQ,CAACP,MAAM,CAACU,WAAD,CAAP,CAAR;AACH;AACJ,CANM;AAOP,OAAO,MAAME,aAAa,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,IAAf,EAAqBC,MAArB,KAAgC,MAAMT,QAAN,IAAkB;AAC3E,QAAMC,QAAQ,GAAG,MAAMZ,SAAS,CAAC,kBAAD,EAAqB;AACjDqB,IAAAA,MAAM,EAAE,MADyC;AAEjDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,IAAF;AAAQC,MAAAA,MAAR;AAAgBC,MAAAA,IAAhB;AAAsBC,MAAAA;AAAtB,KAAf;AAF2C,GAArB,CAAhC;;AAIA,MAAIR,QAAQ,CAACC,EAAb,EAAiB;AACb,UAAMG,aAAa,GAAG,MAAMJ,QAAQ,CAACG,IAAT,EAA5B;AACAJ,IAAAA,QAAQ,CAACH,MAAM,CAACQ,aAAD,CAAP,CAAR;AACAL,IAAAA,QAAQ,CAACD,cAAc,EAAf,CAAR;AACH;AACJ,CAVM;AAYP,MAAMe,YAAY,GAAG;AAAEX,EAAAA,WAAW,EAAE;AAAf,CAArB;;AAEA,SAASY,OAAT,CAAiBC,KAAK,GAAGF,YAAzB,EAAuCG,MAAvC,EAA+C;AAC3C,MAAIC,QAAJ;;AACA,UAAQD,MAAM,CAACtB,IAAf;AACI,SAAKL,eAAL;AACI;AACA;AACA;AACA;AACA4B,MAAAA,QAAQ,GAAG,EACP,GAAGF,KADI;AAEPb,QAAAA,WAAW,EAAEc,MAAM,CAACvB;AAFb,OAAX;AAIA,aAAOwB,QAAP;;AACJ,SAAK1B,cAAL;AACI,aAAOwB,KAAP;;AACJ;AACI,aAAOA,KAAP;AAdR;AAgBH;;AAED,eAAeD,OAAf","sourcesContent":["import { csrfFetch } from \"./csrf.js\";\n\nconst GET_INGREDIENTS = '/ingredients'\nconst GET_MY_INGREDIENTS = '/myIngredients'\nconst NEW_INGREDIENT = '/newIngredient'\n\nconst getIng = (list) => ({\n    type: GET_INGREDIENTS,\n    list\n})\n\nconst getMyIng = (list) => ({\n    type: GET_MY_INGREDIENTS,\n    list\n})\n\nconst newIng = (payload) => ({\n    type: NEW_INGREDIENT,\n    payload\n})\n\n\nexport const getIngredients = () => async dispatch => {\n    const response = await csrfFetch('/api/ingredients')\n    if (response.ok) {\n        const ingredients = await response.json();\n        dispatch(getIng(ingredients));\n    }\n}\nexport const newIngredient = (name, imgUrl, desc, userId) => async dispatch => {\n    const response = await csrfFetch(\"/api/ingredients\", {\n        method: \"POST\",\n        body: JSON.stringify({ name, imgUrl, desc, userId }),\n    });\n    if (response.ok) {\n        const newIngredient = await response.json();\n        dispatch(newIng(newIngredient))\n        dispatch(getIngredients());\n    }\n}\n\nconst initialState = { ingredients: null };\n\nfunction reducer(state = initialState, action) {\n    let newState;\n    switch (action.type) {\n        case GET_INGREDIENTS:\n            // const allIngs = {};\n            // action.list.forEach(ingredient => {\n            //     allIngs[ingredient.id] = ingredient\n            // })\n            newState = {\n                ...state,\n                ingredients: action.list\n            }\n            return newState;\n        case NEW_INGREDIENT:\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}