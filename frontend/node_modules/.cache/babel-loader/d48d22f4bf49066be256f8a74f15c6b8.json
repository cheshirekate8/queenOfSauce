{"ast":null,"code":"import { csrfFetch } from \"./csrf.js\";\nconst GET_INGREDIENTS = '/ingredients';\n\nconst getIng = list => ({\n  type: GET_INGREDIENTS,\n  list\n});\n\nexport const getIngredients = () => async dispatch => {\n  const response = await csrfFetch('/api/ingredients');\n\n  if (response.ok) {\n    const ingredients = await response.json();\n    dispatch(getIng(ingredients));\n  }\n};\nconst initialState = {\n  ingredients: null\n};\n\nfunction reducer(state = initialState, action) {\n  let newState;\n\n  switch (action.type) {\n    case GET_INGREDIENTS:\n      const allIngs = {};\n      action.list.forEach(ingredient => {\n        allIngs[ingredient.id] = ingredient;\n      });\n      newState = { ...state,\n        ingredients: allIngs\n      };\n      return newState;\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/cheshirekate8/appAcademyCode/projects/stardewRecipes/solution/frontend/src/store/pantry.js"],"names":["csrfFetch","GET_INGREDIENTS","getIng","list","type","getIngredients","dispatch","response","ok","ingredients","json","initialState","reducer","state","action","newState","allIngs","forEach","ingredient","id"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AAEA,MAAMC,eAAe,GAAG,cAAxB;;AAEA,MAAMC,MAAM,GAAIC,IAAD,KAAW;AACtBC,EAAAA,IAAI,EAAEH,eADgB;AAEtBE,EAAAA;AAFsB,CAAX,CAAf;;AAMA,OAAO,MAAME,cAAc,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAClD,QAAMC,QAAQ,GAAG,MAAMP,SAAS,CAAC,kBAAD,CAAhC;;AACA,MAAIO,QAAQ,CAACC,EAAb,EAAiB;AACb,UAAMC,WAAW,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA1B;AACAJ,IAAAA,QAAQ,CAACJ,MAAM,CAACO,WAAD,CAAP,CAAR;AACH;AACJ,CANM;AAQP,MAAME,YAAY,GAAG;AAAEF,EAAAA,WAAW,EAAE;AAAf,CAArB;;AAEA,SAASG,OAAT,CAAiBC,KAAK,GAAGF,YAAzB,EAAuCG,MAAvC,EAA+C;AAC3C,MAAIC,QAAJ;;AACA,UAAQD,MAAM,CAACV,IAAf;AACI,SAAKH,eAAL;AACI,YAAMe,OAAO,GAAG,EAAhB;AACAF,MAAAA,MAAM,CAACX,IAAP,CAAYc,OAAZ,CAAoBC,UAAU,IAAI;AAC9BF,QAAAA,OAAO,CAACE,UAAU,CAACC,EAAZ,CAAP,GAAyBD,UAAzB;AACH,OAFD;AAGAH,MAAAA,QAAQ,GAAG,EACP,GAAGF,KADI;AAEPJ,QAAAA,WAAW,EAAEO;AAFN,OAAX;AAIA,aAAOD,QAAP;;AACJ;AACI,aAAOF,KAAP;AAZR;AAcH;;AAED,eAAeD,OAAf","sourcesContent":["import { csrfFetch } from \"./csrf.js\";\n\nconst GET_INGREDIENTS = '/ingredients'\n\nconst getIng = (list) => ({\n    type: GET_INGREDIENTS,\n    list\n})\n\n\nexport const getIngredients = () => async dispatch => {\n    const response = await csrfFetch('/api/ingredients')\n    if (response.ok) {\n        const ingredients = await response.json();\n        dispatch(getIng(ingredients));\n    }\n}\n\nconst initialState = { ingredients: null };\n\nfunction reducer(state = initialState, action) {\n    let newState;\n    switch (action.type) {\n        case GET_INGREDIENTS:\n            const allIngs = {};\n            action.list.forEach(ingredient => {\n                allIngs[ingredient.id] = ingredient\n            })\n            newState = {\n                ...state,\n                ingredients: allIngs\n            }\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}