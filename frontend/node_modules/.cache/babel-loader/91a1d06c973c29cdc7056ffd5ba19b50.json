{"ast":null,"code":"import { csrfFetch } from \"./csrf.js\";\nconst GET_KITCHEN = '/kitchen';\nconst CLEAR_KITCHEN = '/clearKitchen';\nconst NEW_KITCHEN = '/newkitchen';\nconst DELETE_REF = '/deletefridge';\n\nconst getKitchen = payload => ({\n  type: GET_KITCHEN,\n  payload\n});\n\nexport const clearFridges = () => ({\n  type: CLEAR_KITCHEN\n});\n\nconst newKitchen = payload => ({\n  type: NEW_KITCHEN,\n  payload\n});\n\nconst deleteRef = () => ({\n  type: DELETE_REF\n});\n\nexport const getFridges = userId => async dispatch => {\n  const response = await csrfFetch(`/api/fridges/user/${userId}`);\n\n  if (response.ok) {\n    const fridges = await response.json();\n    dispatch(getKitchen(fridges));\n    return fridges;\n  }\n};\nexport const newFridge = (userId, name) => async dispatch => {\n  const response = await csrfFetch(\"/api/fridges\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      userId,\n      name\n    })\n  });\n\n  if (response.ok) {\n    const newFridge = await response.json();\n    dispatch(newKitchen(newFridge));\n    const response2 = await csrfFetch(`/api/fridges/user/${userId}`);\n\n    if (response2.ok) {\n      const fridges = await response2.json();\n      dispatch(getKitchen(fridges));\n      return fridges;\n    }\n  }\n};\nexport const deleteFridge = fridgeId => async dispatch => {\n  const response = await csrfFetch(`/api/fridges/${fridgeId}`, {\n    method: 'DELETE'\n  });\n  const data = await response.json();\n  dispatch(deleteRef());\n  return 'DELETED';\n};\nconst initialState = {\n  fridges: null\n};\n\nfunction reducer(state = initialState, action) {\n  let newState;\n\n  switch (action.type) {\n    case GET_KITCHEN:\n      newState = { ...state,\n        fridges: action.payload\n      };\n      return newState;\n\n    case CLEAR_KITCHEN:\n      return { ...state,\n        fridges: null\n      };\n\n    case NEW_KITCHEN:\n      return state;\n\n    case DELETE_REF:\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/cheshirekate8/appAcademyCode/projects/stardewRecipes/solution/frontend/src/store/kitchen.js"],"names":["csrfFetch","GET_KITCHEN","CLEAR_KITCHEN","NEW_KITCHEN","DELETE_REF","getKitchen","payload","type","clearFridges","newKitchen","deleteRef","getFridges","userId","dispatch","response","ok","fridges","json","newFridge","name","method","body","JSON","stringify","response2","deleteFridge","fridgeId","data","initialState","reducer","state","action","newState"],"mappings":"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","sourcesContent":["import { csrfFetch } from \"./csrf.js\";\n\nconst GET_KITCHEN = '/kitchen'\nconst CLEAR_KITCHEN = '/clearKitchen'\nconst NEW_KITCHEN = '/newkitchen'\nconst DELETE_REF = '/deletefridge'\n\nconst getKitchen = payload => ({\n    type: GET_KITCHEN,\n    payload\n})\n\nexport const clearFridges = () => ({\n    type: CLEAR_KITCHEN\n})\n\nconst newKitchen = payload => ({\n    type: NEW_KITCHEN,\n    payload\n})\n\nconst deleteRef = () => ({\n    type: DELETE_REF,\n\n})\n\nexport const getFridges = userId => async dispatch => {\n    const response = await csrfFetch(`/api/fridges/user/${userId}`)\n    if (response.ok) {\n        const fridges = await response.json();\n        dispatch(getKitchen(fridges));\n        return fridges;\n    }\n}\n\nexport const newFridge = (userId, name) => async dispatch => {\n    const response = await csrfFetch(\"/api/fridges\", {\n        method: \"POST\",\n        body: JSON.stringify({ userId, name }),\n    });\n    if (response.ok) {\n        const newFridge = await response.json();\n        dispatch(newKitchen(newFridge));\n        const response2 = await csrfFetch(`/api/fridges/user/${userId}`)\n        if (response2.ok) {\n            const fridges = await response2.json();\n            dispatch(getKitchen(fridges));\n            return fridges;\n        }\n    }\n}\n\nexport const deleteFridge = (fridgeId) => async (dispatch) => {\n    const response = await csrfFetch(`/api/fridges/${fridgeId}`, {\n        method: 'DELETE'\n    })\n    const data = await response.json();\n    dispatch(deleteRef());\n    return 'DELETED'\n}\n\n\nconst initialState = { fridges: null };\n\nfunction reducer(state = initialState, action) {\n    let newState;\n    switch (action.type) {\n        case GET_KITCHEN:\n            newState = {\n                ...state,\n                fridges: action.payload\n            }\n            return newState;\n        case CLEAR_KITCHEN:\n            return {\n                ...state,\n                fridges: null\n            }\n        case NEW_KITCHEN:\n            return state;\n        case DELETE_REF:\n            return state\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}