{"ast":null,"code":"import { csrfFetch } from \"./csrf.js\";\nconst GET_KITCHEN = '/kitchen';\nconst CLEAR_KITCHEN = '/clearKitchen';\nconst NEW_KITCHEN = '/newkitchen';\n\nconst getKitchen = payload => ({\n  type: GET_KITCHEN,\n  payload\n});\n\nexport const clearFridges = () => ({\n  type: CLEAR_KITCHEN\n});\n\nconst newKitchen = payload => ({\n  type: NEW_KITCHEN,\n  payload\n});\n\nexport const getFridges = userId => async dispatch => {\n  const response = await csrfFetch(`/api/fridges/user/${userId}`);\n\n  if (response.ok) {\n    const fridges = await response.json();\n    dispatch(getKitchen(fridges));\n    return fridges;\n  }\n};\nexport const newFridge = (userId, name) => async dispatch => {\n  const response = await csrfFetch(\"/api/fridges\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      userId,\n      name\n    })\n  });\n\n  if (response.ok) {\n    const newFridge = await response.json();\n    dispatch(newKitchen(newFridge));\n    return newFridge;\n  }\n};\nconst initialState = {\n  fridges: null\n};\n\nfunction reducer(state = initialState, action) {\n  let newState;\n\n  switch (action.type) {\n    case GET_KITCHEN:\n      newState = { ...state,\n        fridges: action.payload\n      };\n      return newState;\n\n    case CLEAR_KITCHEN:\n      return { ...state,\n        fridges: null\n      };\n\n    case NEW_KITCHEN:\n      newState = { ...(state[fridges] = [...fridges, action.payload])\n      };\n      return newState;\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/cheshirekate8/appAcademyCode/projects/stardewRecipes/solution/frontend/src/store/kitchen.js"],"names":["csrfFetch","GET_KITCHEN","CLEAR_KITCHEN","NEW_KITCHEN","getKitchen","payload","type","clearFridges","newKitchen","getFridges","userId","dispatch","response","ok","fridges","json","newFridge","name","method","body","JSON","stringify","initialState","reducer","state","action","newState"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AAEA,MAAMC,WAAW,GAAG,UAApB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,WAAW,GAAG,aAApB;;AAEA,MAAMC,UAAU,GAAGC,OAAO,KAAK;AAC3BC,EAAAA,IAAI,EAAEL,WADqB;AAE3BI,EAAAA;AAF2B,CAAL,CAA1B;;AAKA,OAAO,MAAME,YAAY,GAAG,OAAO;AAC/BD,EAAAA,IAAI,EAAEJ;AADyB,CAAP,CAArB;;AAIP,MAAMM,UAAU,GAAGH,OAAO,KAAK;AAC3BC,EAAAA,IAAI,EAAEH,WADqB;AAE3BE,EAAAA;AAF2B,CAAL,CAA1B;;AAKA,OAAO,MAAMI,UAAU,GAAGC,MAAM,IAAI,MAAMC,QAAN,IAAkB;AAClD,QAAMC,QAAQ,GAAG,MAAMZ,SAAS,CAAE,qBAAoBU,MAAO,EAA7B,CAAhC;;AACA,MAAIE,QAAQ,CAACC,EAAb,EAAiB;AACb,UAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACAJ,IAAAA,QAAQ,CAACP,UAAU,CAACU,OAAD,CAAX,CAAR;AACA,WAAOA,OAAP;AACH;AACJ,CAPM;AASP,OAAO,MAAME,SAAS,GAAG,CAACN,MAAD,EAASO,IAAT,KAAkB,MAAMN,QAAN,IAAkB;AACzD,QAAMC,QAAQ,GAAG,MAAMZ,SAAS,CAAC,cAAD,EAAiB;AAC7CkB,IAAAA,MAAM,EAAE,MADqC;AAE7CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEX,MAAAA,MAAF;AAAUO,MAAAA;AAAV,KAAf;AAFuC,GAAjB,CAAhC;;AAIA,MAAIL,QAAQ,CAACC,EAAb,EAAiB;AACb,UAAMG,SAAS,GAAG,MAAMJ,QAAQ,CAACG,IAAT,EAAxB;AACAJ,IAAAA,QAAQ,CAACH,UAAU,CAACQ,SAAD,CAAX,CAAR;AACA,WAAOA,SAAP;AACH;AACJ,CAVM;AAaP,MAAMM,YAAY,GAAG;AAAER,EAAAA,OAAO,EAAE;AAAX,CAArB;;AAEA,SAASS,OAAT,CAAiBC,KAAK,GAAGF,YAAzB,EAAuCG,MAAvC,EAA+C;AAC3C,MAAIC,QAAJ;;AACA,UAAQD,MAAM,CAACnB,IAAf;AACI,SAAKL,WAAL;AACIyB,MAAAA,QAAQ,GAAG,EACP,GAAGF,KADI;AAEPV,QAAAA,OAAO,EAAEW,MAAM,CAACpB;AAFT,OAAX;AAIA,aAAOqB,QAAP;;AACJ,SAAKxB,aAAL;AACI,aAAO,EACH,GAAGsB,KADA;AAEHV,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKX,WAAL;AACIuB,MAAAA,QAAQ,GAAG,EACP,IAAGF,KAAK,CAACV,OAAD,CAAL,GAAiB,CAAC,GAAGA,OAAJ,EAAaW,MAAM,CAACpB,OAApB,CAApB;AADO,OAAX;AAGA,aAAOqB,QAAP;;AACJ;AACI,aAAOF,KAAP;AAlBR;AAoBH;;AAED,eAAeD,OAAf","sourcesContent":["import { csrfFetch } from \"./csrf.js\";\n\nconst GET_KITCHEN = '/kitchen'\nconst CLEAR_KITCHEN = '/clearKitchen'\nconst NEW_KITCHEN = '/newkitchen'\n\nconst getKitchen = payload => ({\n    type: GET_KITCHEN,\n    payload\n})\n\nexport const clearFridges = () => ({\n    type: CLEAR_KITCHEN\n})\n\nconst newKitchen = payload => ({\n    type: NEW_KITCHEN,\n    payload\n})\n\nexport const getFridges = userId => async dispatch => {\n    const response = await csrfFetch(`/api/fridges/user/${userId}`)\n    if (response.ok) {\n        const fridges = await response.json();\n        dispatch(getKitchen(fridges));\n        return fridges;\n    }\n}\n\nexport const newFridge = (userId, name) => async dispatch => {\n    const response = await csrfFetch(\"/api/fridges\", {\n        method: \"POST\",\n        body: JSON.stringify({ userId, name }),\n    });\n    if (response.ok) {\n        const newFridge = await response.json();\n        dispatch(newKitchen(newFridge));\n        return newFridge;\n    }\n}\n\n\nconst initialState = { fridges: null };\n\nfunction reducer(state = initialState, action) {\n    let newState;\n    switch (action.type) {\n        case GET_KITCHEN:\n            newState = {\n                ...state,\n                fridges: action.payload\n            }\n            return newState;\n        case CLEAR_KITCHEN:\n            return {\n                ...state,\n                fridges: null\n            }\n        case NEW_KITCHEN:\n            newState = {\n                ...state[fridges] = [...fridges, action.payload]\n            }\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}